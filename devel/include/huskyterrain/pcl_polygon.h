// Generated by gencpp from file huskyterrain/pcl_polygon.msg
// DO NOT EDIT!


#ifndef HUSKYTERRAIN_MESSAGE_PCL_POLYGON_H
#define HUSKYTERRAIN_MESSAGE_PCL_POLYGON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/Imu.h>
#include <geometry_msgs/Vector3.h>

namespace huskyterrain
{
template <class ContainerAllocator>
struct pcl_polygon_
{
  typedef pcl_polygon_<ContainerAllocator> Type;

  pcl_polygon_()
    : header()
    , pointcloud()
    , pose()
    , angular_acceleration()
    , coorx(0.0)
    , coory(0.0)
    , id(0)
    , sampling_rate(0)  {
    }
  pcl_polygon_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pointcloud(_alloc)
    , pose(_alloc)
    , angular_acceleration(_alloc)
    , coorx(0.0)
    , coory(0.0)
    , id(0)
    , sampling_rate(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _pointcloud_type;
  _pointcloud_type pointcloud;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_acceleration_type;
  _angular_acceleration_type angular_acceleration;

   typedef float _coorx_type;
  _coorx_type coorx;

   typedef float _coory_type;
  _coory_type coory;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _sampling_rate_type;
  _sampling_rate_type sampling_rate;




  typedef boost::shared_ptr< ::huskyterrain::pcl_polygon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::huskyterrain::pcl_polygon_<ContainerAllocator> const> ConstPtr;

}; // struct pcl_polygon_

typedef ::huskyterrain::pcl_polygon_<std::allocator<void> > pcl_polygon;

typedef boost::shared_ptr< ::huskyterrain::pcl_polygon > pcl_polygonPtr;
typedef boost::shared_ptr< ::huskyterrain::pcl_polygon const> pcl_polygonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::huskyterrain::pcl_polygon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::huskyterrain::pcl_polygon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace huskyterrain

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'huskyterrain': ['/home/vsung/catkin_ws/src/huskyterrain/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::huskyterrain::pcl_polygon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::huskyterrain::pcl_polygon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::huskyterrain::pcl_polygon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::huskyterrain::pcl_polygon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::huskyterrain::pcl_polygon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::huskyterrain::pcl_polygon_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::huskyterrain::pcl_polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "279a1093c9d91a38bceaa74bd7e84622";
  }

  static const char* value(const ::huskyterrain::pcl_polygon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x279a1093c9d91a38ULL;
  static const uint64_t static_value2 = 0xbceaa74bd7e84622ULL;
};

template<class ContainerAllocator>
struct DataType< ::huskyterrain::pcl_polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "huskyterrain/pcl_polygon";
  }

  static const char* value(const ::huskyterrain::pcl_polygon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::huskyterrain::pcl_polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
sensor_msgs/PointCloud2 pointcloud\n\
sensor_msgs/Imu pose\n\
geometry_msgs/Vector3 angular_acceleration\n\
float32 coorx\n\
float32 coory\n\
int32 id\n\
int32 sampling_rate\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Imu\n\
# This is a message to hold data from an IMU (Inertial Measurement Unit)\n\
#\n\
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n\
#\n\
# If the covariance of the measurement is known, it should be filled in (if all you know is the \n\
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n\
# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n\
# data a covariance will have to be assumed or gotten from some other source\n\
#\n\
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n\
# estimate), please set element 0 of the associated covariance matrix to -1\n\
# If you are interpreting this message, please check for a value of -1 in the first element of each \n\
# covariance matrix, and disregard the associated estimate.\n\
\n\
Header header\n\
\n\
geometry_msgs/Quaternion orientation\n\
float64[9] orientation_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 angular_velocity\n\
float64[9] angular_velocity_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 linear_acceleration\n\
float64[9] linear_acceleration_covariance # Row major x, y z \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::huskyterrain::pcl_polygon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::huskyterrain::pcl_polygon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pointcloud);
      stream.next(m.pose);
      stream.next(m.angular_acceleration);
      stream.next(m.coorx);
      stream.next(m.coory);
      stream.next(m.id);
      stream.next(m.sampling_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pcl_polygon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::huskyterrain::pcl_polygon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::huskyterrain::pcl_polygon_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pointcloud: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.pointcloud);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "angular_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_acceleration);
    s << indent << "coorx: ";
    Printer<float>::stream(s, indent + "  ", v.coorx);
    s << indent << "coory: ";
    Printer<float>::stream(s, indent + "  ", v.coory);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "sampling_rate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sampling_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUSKYTERRAIN_MESSAGE_PCL_POLYGON_H
